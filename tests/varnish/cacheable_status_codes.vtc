varnishtest "Check cacheable status codes"

server s1 {
    # Probe request
    rxreq
    expect req.url == "/health_check.php"
    txresp
    close
    accept

    # 200 OK response - first request
    rxreq
    expect req.url == "/status-200"
    expect req.method == "GET"
    txresp -status 200 -body "Status 200 response"

    # 200 OK response - second request (cache hit, so backend should not see this)
    # No second rxreq for /status-200

    # 404 Not Found response - first request
    rxreq
    expect req.url == "/status-404"
    expect req.method == "GET"
    txresp -status 404 -body "Status 404 response"

    # 404 Not Found response - second request (cache hit, so backend should not see this)
    # No second rxreq for /status-404

    # 500 Internal Server Error response - first request
    rxreq
    expect req.url == "/status-500"
    expect req.method == "GET"
    txresp -status 500 -body "Status 500 response"

    # 500 Internal Server Error response - second request (should not cache, so backend sees this)
    rxreq
    expect req.url == "/status-500"
    expect req.method == "GET"
    txresp -status 500 -body "Status 500 response 2"

    # 301 Moved Permanently response - first request
    rxreq
    expect req.url == "/status-301"
    expect req.method == "GET"
    txresp -status 301 -hdr "Location: /new-location" -body "Status 301 response"

    # 301 Moved Permanently response - second request (should not cache, so backend sees this)
    rxreq
    expect req.url == "/status-301"
    expect req.method == "GET"
    txresp -status 301 -hdr "Location: /new-location" -body "Status 301 response 2"
} -start

# Generate the VCL file
shell {
    export s1_addr="${s1_addr}"
    export s1_port="${s1_port}"
    ${testdir}/helpers/parse_vcl.pl "${testdir}/../../etc/varnish6.vcl" "${tmpdir}/output.vcl"
}

varnish v1 -arg "-f" -arg "${tmpdir}/output.vcl" -arg "-p" -arg "vsl_mask=+Hash" -start

# make sure the probe request fired
delay 1

client c1 {
    # 200 OK response - first request (should be a MISS)
    txreq -method "GET" -url "/status-200"
    rxresp
    expect resp.status == 200
    expect resp.http.X-Magento-Cache-Debug == "MISS"
    expect resp.body == "Status 200 response"

    # 200 OK response - second request (should be a HIT, backend does not handle this)
    txreq -method "GET" -url "/status-200"
    rxresp
    expect resp.status == 200
    expect resp.http.X-Magento-Cache-Debug == "HIT"
    expect resp.body == "Status 200 response"

    # 404 Not Found response - first request (should be MISS)
    txreq -method "GET" -url "/status-404"
    rxresp
    expect resp.status == 404
    expect resp.http.X-Magento-Cache-Debug == "MISS"
    expect resp.body == "Status 404 response"

    # 404 Not Found response - second request (should be HIT, backend does not handle this)
    txreq -method "GET" -url "/status-404"
    rxresp
    expect resp.status == 404
    expect resp.http.X-Magento-Cache-Debug == "HIT"
    expect resp.body == "Status 404 response"

    # 500 Internal Server Error response - first request (should be UNCACHEABLE)
    txreq -method "GET" -url "/status-500"
    rxresp
    expect resp.status == 500
    expect resp.http.X-Magento-Cache-Debug == "UNCACHEABLE"
    expect resp.body == "Status 500 response"

    # 500 Internal Server Error response - second request (should be UNCACHEABLE, new backend response)
    txreq -method "GET" -url "/status-500"
    rxresp
    expect resp.status == 500
    expect resp.http.X-Magento-Cache-Debug == "UNCACHEABLE"
    expect resp.body == "Status 500 response 2"

    # 301 Moved Permanently response - first request (should be UNCACHEABLE)
    txreq -method "GET" -url "/status-301"
    rxresp
    expect resp.status == 301
    expect resp.http.X-Magento-Cache-Debug == "UNCACHEABLE"
    expect resp.body == "Status 301 response"

    # 301 Moved Permanently response - second request (should be UNCACHEABLE, new backend response)
    txreq -method "GET" -url "/status-301"
    rxresp
    expect resp.status == 301
    expect resp.http.X-Magento-Cache-Debug == "UNCACHEABLE"
    expect resp.body == "Status 301 response 2"
} -run
